name: workflow

on:
  push:
    branches:
      - main

    paths-ignore:
      - 'README.md'

permissions:
  id-token: write
  contents: read

jobs:
  # Job 1
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      # 1
      - name: Checkout Code
        uses: actions/checkout@v3
      # 2
      - name: Lint code
        run: echo "Linting repository"
      # 3
      - name: Run unit tests
        run: echo "Running unit tests"
  
  # Job 2
  build-and-push-ecr-image:
    name: Continuous Delivery
    needs: integration # Job 1
    runs-on: ubuntu-latest

    steps:
      # 1
      - name: Checkout Code
        uses: actions/checkout@v3
      # 2
      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip
      # 3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      # 4
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # 5
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.

          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          #docker build -f NetworkSecurityProject/DockerFile $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  # Job 3        
  Continuous-Deployment:

    needs: build-and-push-ecr-image
    runs-on: self-hosted
    steps:
      # 1
      - name: Checkout
        uses: actions/checkout@v3

      # 2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 3
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      # 4
      - name: Pull latest images
        run: |
         docker pull ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
         
      #- name: Stop and remove  container if running
       # run: |
        # docker ps -q --filter "name=networksecurity" | grep -q . && docker stop networksecurity && docker rm -fv networksecurity
      
      # 5
      - name: Run Docker Image to serve users
        run: |
            docker run -d -p 8080:8080 --ipc="host" --name=studentperformance -e 'AWS_ACCESS_KEY_ID = ${{ secrets.AWS_ACCESS_KEY_ID }}' -e 'AWS_SECRET_ACCESS_KEY = ${{ secrets.AWS_SECRET_ACCESS_KEY }}' -e 'AWS_REGION = ${{ secrets.AWS_REGION }}'  ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest

      # 6   
      - name: Clean previous images and containers
        run: |
            docker system prune -f


            
